/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.mule.tooling.lang.dw.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static org.mule.tooling.lang.dw.parser.psi.WeaveTypes.*;
import static org.mule.tooling.lang.dw.parser.WeaveParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_WeaveLexer.flex</tt>
 */
public class _WeaveLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 18704 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\25\1\61\1\62\5\21\2\25\1\63"+
    "\7\21\1\25\1\64\20\21\1\25\1\65\1\21\1\66\13\25\1\67\1\25\1\70\1\71\21\21"+
    "\1\72\1\73\4\21\1\74\11\21\1\75\1\76\1\77\1\100\1\21\1\101\2\21\1\102\1\103"+
    "\2\21\1\104\1\21\1\105\1\106\5\21\1\107\2\21\123\25\1\110\7\25\1\111\1\112"+
    "\12\25\1\113\15\114\1\115\6\21\1\25\1\116\2\21\11\114\1\117\u0576\21\1\120"+
    "\u017f\21");

  /* The ZZ_CMAP_Y table has 5184 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\4\0\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\3\22\1\23\71\22\1\24\1\22\1\25\1\26\1\27\1\30\2"+
    "\26\16\0\1\31\1\32\1\33\1\34\2\22\1\35\11\22\1\36\21\22\1\37\1\40\24\22\1"+
    "\41\3\22\1\23\1\42\1\43\4\22\1\44\1\45\4\0\1\46\1\47\1\26\3\22\1\50\1\51\1"+
    "\26\1\52\1\53\1\0\1\54\5\22\1\55\3\0\1\56\1\43\13\22\1\57\1\46\1\60\1\61\1"+
    "\0\1\62\1\26\1\63\1\64\3\22\3\0\1\65\12\22\1\66\1\0\1\67\1\26\1\0\1\70\3\22"+
    "\1\55\1\71\1\72\2\22\1\66\1\73\1\74\1\75\2\26\3\22\1\76\1\0\1\77\6\26\2\22"+
    "\1\31\1\66\1\0\1\26\1\100\5\0\1\101\6\22\1\102\2\0\1\103\1\22\1\104\1\0\1"+
    "\41\1\22\1\105\1\106\1\107\2\22\1\110\1\111\1\112\1\113\1\114\1\63\1\115\1"+
    "\104\1\0\1\116\1\117\1\120\1\121\1\107\2\22\1\110\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\0\1\131\1\26\1\120\1\36\1\35\2\22\1\110\1\132\1\112\1"+
    "\46\1\133\1\134\1\26\1\104\1\0\1\126\1\135\1\120\1\106\1\107\2\22\1\110\1"+
    "\132\1\112\1\113\1\125\1\136\1\115\1\104\1\0\1\42\1\26\1\137\1\140\1\141\1"+
    "\142\1\143\1\140\1\22\1\144\1\145\1\146\1\147\1\26\1\130\1\0\1\26\1\126\1"+
    "\150\1\31\1\110\2\22\1\110\1\22\1\151\1\152\1\146\1\153\1\51\1\104\1\0\2\26"+
    "\1\105\1\31\1\110\2\22\1\110\1\154\1\112\1\152\1\146\1\153\1\33\1\104\1\0"+
    "\1\155\1\26\1\150\1\31\1\110\4\22\1\156\1\152\1\157\1\160\1\161\1\104\1\0"+
    "\1\26\1\40\1\120\1\22\1\23\1\40\2\22\1\35\1\162\1\23\1\163\1\164\1\0\1\130"+
    "\1\0\1\165\1\26\1\41\5\22\1\166\1\124\1\167\1\170\1\0\1\171\4\26\1\172\1\173"+
    "\1\101\1\43\1\174\1\175\1\166\1\176\1\177\1\52\1\0\1\200\4\26\1\134\2\26\1"+
    "\171\1\0\1\171\1\201\1\202\1\22\1\41\3\22\1\27\1\45\1\0\1\152\1\203\1\0\1"+
    "\45\3\0\1\204\1\205\7\26\5\22\1\55\1\0\1\206\1\0\1\171\1\66\1\207\1\210\1"+
    "\211\1\212\1\22\1\213\1\214\1\0\1\52\4\22\1\36\1\20\5\22\1\215\51\22\1\141"+
    "\1\23\1\141\5\22\1\141\4\22\1\141\1\23\1\141\1\22\1\23\7\22\1\141\10\22\1"+
    "\216\4\26\2\22\2\26\12\22\2\217\1\41\114\22\1\106\2\22\1\41\2\22\1\51\11\22"+
    "\1\220\1\43\1\134\1\22\1\31\1\221\1\26\2\22\1\221\1\26\2\22\1\116\1\26\1\22"+
    "\1\31\1\222\1\26\6\22\1\223\3\0\1\224\1\225\1\0\1\171\3\26\1\226\1\0\1\171"+
    "\13\22\1\227\1\230\4\22\1\231\10\22\1\217\1\26\3\22\1\23\1\0\1\2\1\0\1\2\1"+
    "\130\1\0\3\22\1\217\1\27\1\26\5\22\1\232\3\22\1\25\1\0\1\171\4\26\2\22\1\167"+
    "\1\2\6\22\1\203\1\170\3\0\1\113\1\0\1\171\1\0\1\171\1\161\1\26\1\0\1\46\1"+
    "\227\7\26\1\150\5\22\1\223\1\0\1\150\1\232\1\0\1\171\1\26\1\100\1\2\1\26\1"+
    "\233\3\22\1\103\1\211\1\0\1\70\4\22\1\66\1\0\1\2\1\26\4\22\1\223\2\0\1\26"+
    "\1\0\1\234\1\0\1\70\3\22\1\217\1\22\1\134\5\0\1\235\2\26\1\236\2\0\1\237\1"+
    "\240\1\77\30\22\7\0\1\241\42\22\2\217\4\22\2\217\1\22\1\242\3\22\1\217\6\22"+
    "\1\31\1\177\1\243\1\27\1\244\1\232\1\22\1\27\1\243\1\27\1\26\1\100\3\26\1"+
    "\245\1\26\1\63\1\227\1\26\1\246\1\26\1\152\1\0\1\42\1\161\2\26\1\22\1\27\4"+
    "\0\2\26\1\0\1\204\1\247\1\0\1\227\1\26\1\250\1\40\1\162\1\251\1\30\1\252\1"+
    "\22\1\253\1\254\1\255\2\26\4\0\1\256\1\227\116\26\5\22\1\23\5\22\1\23\20\22"+
    "\1\27\1\257\1\260\1\26\4\22\1\36\1\20\7\22\1\161\1\26\1\63\2\22\1\23\1\26"+
    "\10\23\4\0\5\26\1\161\72\26\1\261\3\26\1\45\1\0\1\251\1\262\1\41\11\22\1\23"+
    "\1\263\1\41\12\22\1\215\1\254\4\22\1\66\1\41\12\22\1\23\2\26\3\22\1\55\6\26"+
    "\170\22\1\66\1\0\10\26\72\22\1\66\4\0\1\204\21\22\1\27\10\26\5\22\1\217\41"+
    "\22\1\27\2\22\1\0\1\260\2\26\5\22\1\167\1\264\1\265\3\22\1\66\10\22\1\66\1"+
    "\0\1\171\3\26\1\161\1\22\1\40\14\22\1\107\3\22\1\167\1\22\1\0\1\266\1\77\4"+
    "\26\1\267\1\22\1\270\1\271\2\22\1\55\1\246\1\26\1\227\6\22\1\232\1\26\1\70"+
    "\5\22\1\223\1\0\1\52\1\26\1\0\1\171\2\0\1\70\1\272\1\0\1\70\2\22\1\66\1\52"+
    "\2\22\1\167\1\0\1\2\1\26\3\22\1\27\1\101\5\22\1\55\1\0\1\227\1\161\1\0\1\171"+
    "\1\273\1\22\1\0\1\274\5\22\1\103\1\170\1\26\1\271\1\275\1\0\1\171\2\22\1\23"+
    "\1\276\6\22\1\210\1\277\1\231\2\26\1\300\1\22\1\55\1\301\1\26\3\302\1\26\2"+
    "\23\5\22\1\215\1\66\1\171\16\22\1\55\1\303\1\0\1\171\64\22\1\232\1\26\2\22"+
    "\1\23\1\304\5\22\1\232\40\26\55\22\1\217\15\22\1\25\4\26\1\23\1\26\1\304\1"+
    "\305\1\22\1\110\1\23\1\177\1\306\15\22\1\25\3\26\1\304\54\22\1\217\2\26\10"+
    "\22\1\40\6\22\5\26\1\22\1\307\2\0\2\26\2\0\1\310\2\26\1\136\3\26\1\126\1\31"+
    "\20\22\1\311\1\246\1\26\1\0\1\171\1\41\2\22\1\50\1\41\2\22\1\51\1\312\12\22"+
    "\1\23\3\40\1\313\1\314\2\26\1\315\1\22\1\154\2\22\1\23\2\22\1\316\1\22\1\217"+
    "\1\22\1\217\4\26\17\22\1\51\10\26\6\0\1\204\20\26\1\317\20\26\3\22\1\27\6"+
    "\22\1\134\1\26\1\227\3\26\4\22\1\26\1\136\2\22\1\64\1\320\4\22\1\66\1\77\3"+
    "\22\1\217\4\22\1\232\1\22\1\321\5\26\23\22\1\217\1\0\1\171\4\22\1\232\4\22"+
    "\1\232\5\22\1\26\6\22\1\232\23\26\46\22\1\23\1\26\2\22\1\217\1\26\1\22\23"+
    "\26\1\217\1\110\4\22\1\36\1\322\2\22\1\217\1\26\2\22\1\23\1\26\3\22\1\23\10"+
    "\26\2\22\1\323\1\26\2\22\1\217\1\26\3\22\1\25\10\26\7\22\1\312\10\26\1\324"+
    "\1\264\1\154\1\41\2\22\1\275\1\124\4\26\3\22\1\27\3\22\1\27\4\26\1\22\1\41"+
    "\2\22\1\325\3\26\6\22\1\217\1\26\2\22\1\217\1\26\2\22\1\51\1\26\2\22\1\25"+
    "\15\26\11\22\1\134\6\26\6\22\1\51\1\26\6\22\1\51\1\26\5\0\1\26\1\0\1\171\50"+
    "\26\5\0\1\326\1\171\11\26\3\0\1\204\1\63\1\26\4\0\1\227\13\26\2\0\1\204\3"+
    "\26\2\0\1\170\1\26\1\233\6\22\1\0\1\170\3\26\1\130\1\0\1\26\1\63\1\233\5\22"+
    "\1\0\1\327\1\26\1\317\3\22\1\134\1\0\1\171\1\233\3\22\1\167\1\0\1\152\1\0"+
    "\1\264\1\26\4\22\1\330\1\26\1\233\5\22\1\55\1\0\1\331\1\332\1\0\1\333\4\26"+
    "\2\22\1\35\2\22\1\223\1\0\1\205\10\26\1\23\1\252\1\22\1\36\1\22\1\134\5\22"+
    "\1\167\1\0\1\77\1\0\1\171\1\334\1\106\1\107\2\22\1\110\1\132\1\335\1\113\1"+
    "\125\1\147\1\254\1\104\2\204\21\26\6\22\1\203\1\0\1\206\1\51\1\0\1\336\1\171"+
    "\3\26\6\22\2\0\1\337\1\26\1\0\1\171\24\26\5\22\1\167\1\52\1\0\1\227\2\26\1"+
    "\275\4\26\6\22\2\0\1\340\1\26\1\0\1\171\4\26\5\22\1\55\1\0\1\227\1\0\1\171"+
    "\6\26\3\22\1\341\1\0\1\2\1\0\1\171\30\26\7\0\1\77\14\26\10\22\1\0\1\171\1"+
    "\26\1\161\1\170\1\342\1\343\3\0\1\46\1\344\1\2\1\26\1\0\1\171\10\26\1\0\1"+
    "\266\5\0\1\266\1\326\3\26\7\0\1\170\1\63\1\26\11\0\1\345\4\26\7\22\1\134\40"+
    "\26\1\22\1\110\3\22\1\167\1\170\1\0\1\134\1\26\1\0\1\171\2\26\1\40\3\22\1"+
    "\266\2\0\1\45\1\170\11\26\1\170\1\241\4\0\1\170\1\346\1\0\1\26\1\0\1\171\1"+
    "\46\1\347\3\0\1\170\1\241\1\227\1\0\1\171\46\26\2\0\1\170\27\26\1\227\4\26"+
    "\1\136\1\227\3\26\63\22\1\25\14\26\15\0\1\170\2\26\30\22\1\232\27\26\5\22"+
    "\1\23\1\0\1\227\70\26\10\22\1\23\67\26\7\22\1\134\3\22\1\23\1\0\1\171\14\26"+
    "\3\22\1\217\1\204\1\26\6\22\1\170\1\26\1\232\1\26\1\0\1\171\1\304\2\22\1\254"+
    "\2\22\26\26\10\0\20\26\10\22\1\203\1\124\1\103\6\0\1\63\1\233\1\22\10\26\1"+
    "\350\1\26\1\171\1\26\75\22\1\203\1\0\1\26\36\22\1\55\73\0\1\52\5\26\1\0\1"+
    "\227\36\26\1\213\42\0\1\170\6\26\1\77\1\26\1\264\1\26\61\0\1\2\40\26\15\22"+
    "\1\51\1\22\1\27\1\22\1\134\1\22\1\351\1\2\127\26\1\136\1\352\2\0\1\235\1\2"+
    "\3\26\1\16\22\26\1\353\67\26\12\22\1\31\10\22\1\31\1\354\1\355\1\22\1\356"+
    "\1\154\7\22\1\36\1\357\2\31\3\22\1\360\1\177\1\40\1\110\51\22\1\217\3\22\1"+
    "\110\2\22\1\215\3\22\1\215\2\22\1\31\3\22\1\31\2\22\1\23\3\22\1\23\3\22\1"+
    "\110\3\22\1\110\2\22\1\215\1\361\14\0\1\170\1\100\5\0\1\204\1\317\1\26\1\246"+
    "\2\26\1\100\1\45\1\0\52\26\1\170\2\0\1\344\1\362\1\77\32\26\5\0\1\204\1\0"+
    "\1\52\1\0\1\363\56\26\7\0\1\364\40\26\30\22\1\27\1\26\1\170\5\26\10\22\1\223"+
    "\1\2\1\0\1\171\52\26\1\227\51\26\1\154\3\22\1\365\1\41\1\215\1\366\1\250\1"+
    "\367\1\365\1\242\1\365\2\215\1\127\1\22\1\35\1\22\1\232\1\370\1\35\1\22\1"+
    "\232\146\26\1\0\1\171\32\22\1\167\1\52\4\26\106\22\1\27\1\26\33\22\1\217\120"+
    "\22\1\25\1\26\246\0\1\227\3\26\3\22\1\217\74\26\51\0\1\77\26\26\1\126\3\26"+
    "\14\0\20\26\36\0\2\26");

  /* The ZZ_CMAP_A table has 1992 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\40\1\45\1\2\1\0\1\3\1\1\6\40\4\0\1\43\1\67\1\7\1\75\1\42\1\73\1\36\1\11"+
    "\1\55\1\56\1\6\1\33\1\64\1\37\1\4\1\5\1\51\11\46\1\35\1\0\1\63\1\70\1\72\1"+
    "\74\1\53\4\50\1\52\15\50\1\61\1\10\1\62\1\54\1\41\1\12\1\16\1\34\1\26\1\20"+
    "\1\14\1\66\1\32\1\76\1\21\2\34\1\25\1\30\1\27\1\22\1\24\1\34\1\31\1\65\1\13"+
    "\1\17\1\23\1\77\1\15\1\100\1\34\1\57\1\44\1\60\1\71\1\40\2\0\4\40\4\0\1\47"+
    "\2\0\1\40\7\0\1\47\4\0\1\47\5\0\17\47\1\0\2\47\4\0\4\47\16\0\5\47\7\0\1\47"+
    "\1\0\1\47\1\0\5\47\1\0\2\47\2\0\4\47\1\0\1\47\6\0\1\47\1\0\3\47\1\0\1\47\1"+
    "\0\4\47\1\0\13\47\1\0\3\47\1\0\5\40\2\0\6\47\1\0\7\47\1\0\1\47\6\0\1\40\7"+
    "\47\1\40\6\0\1\40\1\0\15\40\1\0\1\40\1\0\2\40\1\0\2\40\1\0\1\40\3\47\4\0\1"+
    "\40\3\47\5\0\6\40\5\0\1\40\4\0\3\40\1\0\1\40\3\0\3\47\7\40\4\0\6\47\1\0\1"+
    "\47\7\40\2\47\2\40\1\0\4\40\2\47\2\40\3\47\2\0\1\47\7\0\1\40\1\47\1\40\6\47"+
    "\3\40\2\0\11\47\3\40\1\47\6\0\2\40\6\47\4\40\2\47\4\0\1\47\2\0\5\40\1\47\11"+
    "\40\1\47\3\40\1\47\5\40\2\0\1\47\3\40\4\0\3\40\10\0\11\40\6\47\3\40\1\47\2"+
    "\40\1\47\7\40\2\47\2\40\2\0\2\40\1\47\3\40\1\0\10\47\2\0\2\47\2\0\6\47\1\0"+
    "\7\47\1\0\1\47\3\0\4\47\2\0\1\40\1\47\7\40\2\0\2\40\2\0\3\40\1\47\5\0\2\47"+
    "\1\0\3\47\2\40\7\0\2\40\1\0\1\40\2\0\3\40\1\0\6\47\4\0\2\47\1\0\2\47\1\0\2"+
    "\47\1\0\2\47\2\0\1\40\1\0\5\40\4\0\2\40\2\0\3\40\3\0\1\40\7\0\4\47\1\0\1\47"+
    "\7\0\4\40\3\47\1\40\2\0\1\47\1\0\2\47\1\0\3\47\2\40\1\0\3\40\2\0\1\47\10\0"+
    "\1\47\6\40\5\0\3\40\2\0\1\40\1\47\1\0\6\47\3\0\3\47\1\0\4\47\3\0\2\47\1\0"+
    "\1\47\1\0\2\47\3\0\2\47\3\0\2\47\4\0\5\40\3\0\3\40\1\0\4\40\2\0\1\47\6\0\6"+
    "\40\5\47\3\0\1\47\7\40\1\0\2\40\5\0\2\40\1\0\4\47\1\0\3\47\1\0\2\47\5\0\3"+
    "\47\2\40\1\47\3\40\1\0\4\40\1\47\5\0\3\47\1\40\7\0\5\47\1\0\1\47\4\0\1\40"+
    "\4\0\6\40\1\0\1\40\3\0\2\40\4\0\1\47\1\40\2\47\4\40\7\47\10\40\1\0\2\40\7"+
    "\0\2\47\1\0\1\47\1\0\1\40\2\47\1\40\1\47\1\0\1\40\1\47\3\40\3\47\1\0\1\47"+
    "\1\0\1\47\2\40\2\47\1\40\3\47\5\40\1\47\2\0\5\47\1\0\1\47\1\0\2\40\2\0\4\47"+
    "\5\0\1\40\1\0\1\40\1\0\1\40\4\0\2\40\5\47\10\40\11\0\1\40\1\0\7\40\1\47\2"+
    "\40\4\47\3\40\1\47\3\40\2\47\7\40\3\47\4\40\5\47\14\40\1\47\1\40\3\47\1\0"+
    "\7\47\2\0\3\40\6\47\2\0\3\47\3\0\2\40\2\47\3\40\3\0\1\47\1\0\2\40\4\0\4\47"+
    "\10\40\3\0\1\47\3\0\1\40\1\47\1\40\5\0\4\40\1\0\1\40\7\0\5\47\2\40\2\47\1"+
    "\40\1\47\5\0\4\47\4\0\3\40\5\47\2\40\3\0\3\47\3\40\2\0\6\40\1\0\5\40\4\47"+
    "\1\40\4\47\3\40\2\47\3\40\1\0\5\40\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47\2\0"+
    "\3\47\1\0\6\47\2\0\2\47\2\0\5\40\5\0\1\40\4\0\1\40\3\0\3\40\2\0\1\47\4\0\1"+
    "\47\1\0\5\47\2\0\1\47\1\0\4\47\1\0\3\47\2\0\4\47\5\0\5\47\4\0\1\47\1\0\3\40"+
    "\2\47\3\40\3\0\4\47\3\40\2\47\11\0\2\47\4\40\2\47\4\0\2\40\2\0\3\47\4\0\12"+
    "\40\1\0\1\47\2\0\6\40\5\0\2\40\3\47\1\40\3\47\1\40\4\47\1\40\4\47\3\0\1\47"+
    "\1\0\1\47\2\40\5\47\1\40\2\47\2\40\5\47\1\0\4\47\2\40\4\0\1\47\3\40\2\47\1"+
    "\40\5\47\2\40\3\0\3\47\4\0\3\47\2\40\2\0\6\47\1\0\3\40\1\0\2\40\5\0\5\47\5"+
    "\0\1\47\1\40\3\47\1\0\2\47\1\0\6\47\1\40\6\0\2\40\3\0\5\47\2\0\1\40\6\0\2"+
    "\47\2\0\3\47\3\0\2\40\3\0\2\40\2\0\3\40\4\0\3\47\1\0\2\47\1\0\1\47\5\0\1\40"+
    "\2\0\2\47\1\40\6\0\5\40\2\0\1\47\3\0\1\47\2\0\4\47\1\0\2\47\2\0\1\47\3\40"+
    "\1\0\2\40\1\0\5\47\2\40\1\0\2\40\1\0\2\40\3\0\3\40\2\0\1\40\2\0\3\47\1\40"+
    "\2\0\1\47\1\0\1\40\4\47\4\0\4\40\1\0\4\40\1\47\1\0\1\47\3\0\4\40\1\0\5\47"+
    "\1\0\2\40\1\47\4\40\4\0\6\40\2\47\1\0\1\47\1\40\3\0\1\47\3\0\2\47\1\40\2\0"+
    "\3\40\1\0\1\40\2\0\10\40\1\0\2\40\1\0\1\40\2\0\7\40\3\0\1\40\4\0\1\40\1\0"+
    "\2\40\1\0\2\40\1\0\6\40\1\47\1\40\1\0\2\40\3\0\2\47\3\0\2\40\1\0\2\40\3\0"+
    "\3\40\2\0\3\40\5\0\1\47\2\0\2\47\2\0\4\47\1\0\4\47\1\0\1\47\1\0\6\47\2\0\5"+
    "\47\1\0\4\47\1\0\4\47\2\0\4\40\1\0\2\40\1\0\4\40\4\0\1\40\1\0\2\40\5\0\1\40"+
    "\1\0\2\47\1\0\1\47\2\0\1\47\1\0\1\47\1\0\1\47\5\0\1\47\1\0\1\47\1\0\3\47\1"+
    "\0\3\47\1\0\3\47");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\14\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\10\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\10\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\0\1\42\1\43"+
    "\1\5\2\0\1\6\1\0\1\7\2\10\1\0\2\10"+
    "\1\44\3\10\1\45\5\10\1\46\2\10\1\47\1\50"+
    "\1\10\1\51\5\10\1\52\3\10\1\53\1\10\1\54"+
    "\1\55\2\0\1\56\2\57\1\0\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\3\10\1\67\1\70\1\71"+
    "\1\72\1\73\3\0\1\43\2\10\1\0\4\10\1\74"+
    "\12\10\1\75\3\10\1\76\2\10\1\77\1\100\1\101"+
    "\1\57\1\102\1\10\1\103\1\10\1\104\1\105\1\43"+
    "\1\0\1\10\1\106\1\0\1\107\1\110\5\10\1\0"+
    "\6\10\1\111\1\112\3\10\1\113\1\0\1\114\4\10"+
    "\1\114\1\115\1\10\1\116\2\10\1\117\1\10\1\120"+
    "\1\121\2\10\1\122\1\123\1\10\1\124\1\125\4\10"+
    "\1\126\1\127\6\10\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\101\0\u0104\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\101\0\u0555"+
    "\0\101\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\101\0\101\0\u075d\0\101\0\101\0\101\0\u079e\0\101"+
    "\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\101\0\101"+
    "\0\u0965\0\u09a6\0\u09e7\0\101\0\u0a28\0\u0a69\0\101\0\u0aaa"+
    "\0\101\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0249\0\u0c30"+
    "\0\u0c71\0\u0cb2\0\u0249\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7"+
    "\0\u0249\0\u0e38\0\u0e79\0\u0249\0\u0249\0\u0eba\0\u0249\0\u0efb"+
    "\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u0249\0\u1040\0\u1081\0\101"+
    "\0\101\0\u10c2\0\101\0\101\0\u1103\0\u1144\0\u1103\0\u1185"+
    "\0\u11c6\0\u069a\0\101\0\101\0\u1207\0\101\0\101\0\101"+
    "\0\101\0\u1248\0\u1289\0\u12ca\0\101\0\101\0\101\0\101"+
    "\0\101\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u1513\0\u1554\0\u1595\0\u0249\0\u15d6\0\u1617\0\u1658"+
    "\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u0249"+
    "\0\u1860\0\u18a1\0\u18e2\0\u0249\0\u1923\0\u1964\0\101\0\101"+
    "\0\u1103\0\u19a5\0\101\0\u19e6\0\u0249\0\u1a27\0\101\0\101"+
    "\0\101\0\u13ce\0\u1a68\0\u0249\0\u1aa9\0\u0249\0\u0249\0\u1aea"+
    "\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2"+
    "\0\u1d33\0\u1d74\0\u1db5\0\u0249\0\u0249\0\u1df6\0\u1e37\0\u1e78"+
    "\0\u0249\0\u1eb9\0\u1aa9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe"+
    "\0\u0249\0\u203f\0\u0249\0\u2080\0\u20c1\0\u2102\0\u2143\0\u0249"+
    "\0\u1eb9\0\u2184\0\u21c5\0\u0249\0\u0249\0\u2206\0\u0249\0\u0249"+
    "\0\u2247\0\u2288\0\u22c9\0\u230a\0\u0249\0\u0249\0\u234b\0\u238c"+
    "\0\u23cd\0\u240e\0\u244f\0\u2490\0\u0249";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\2\1\4\1\5\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\13\1\22\1\23\1\24\2\13\1\25"+
    "\1\13\1\26\1\27\1\30\1\2\1\31\1\32\1\3"+
    "\1\33\1\3\1\34\2\35\1\36\1\35\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\13\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\3\13\102\0\3\3\37\0\1\3\1\0\1\3"+
    "\33\0\5\61\1\62\1\63\34\61\1\0\35\61\7\6"+
    "\1\64\1\65\70\6\10\7\1\66\1\67\67\7\10\10"+
    "\1\70\1\10\1\71\66\10\13\0\1\13\1\72\14\13"+
    "\1\73\1\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\2\13\7\0\2\13\1\75\13\0\12\13"+
    "\1\76\5\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\2\13\7\0\3\13\13\0\20\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\2\13"+
    "\7\0\3\13\13\0\1\77\3\13\1\100\4\13\1\101"+
    "\2\13\1\102\3\13\1\0\1\13\1\74\2\0\3\35"+
    "\3\0\5\35\12\0\1\103\1\13\7\0\3\13\13\0"+
    "\11\13\1\104\2\13\1\105\1\13\1\106\1\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\1\107"+
    "\1\13\7\0\3\13\13\0\1\13\1\110\5\13\1\111"+
    "\10\13\1\0\1\13\1\74\2\0\3\35\3\0\5\35"+
    "\12\0\2\13\7\0\3\13\13\0\14\13\1\112\1\113"+
    "\2\13\1\0\1\13\1\74\2\0\3\35\3\0\5\35"+
    "\12\0\1\114\1\115\7\0\3\13\13\0\4\13\1\116"+
    "\11\13\1\117\1\13\1\0\1\13\1\74\2\0\3\35"+
    "\3\0\5\35\12\0\2\13\7\0\3\13\13\0\3\13"+
    "\1\120\2\13\1\121\11\13\1\0\1\13\1\74\2\0"+
    "\3\35\3\0\5\35\12\0\2\13\7\0\3\13\13\0"+
    "\3\13\1\122\14\13\1\0\1\13\1\74\2\0\3\35"+
    "\3\0\5\35\12\0\2\13\7\0\3\13\13\0\4\13"+
    "\1\123\2\13\1\124\10\13\1\0\1\13\1\74\2\0"+
    "\3\35\3\0\5\35\12\0\1\125\1\13\7\0\3\13"+
    "\13\0\3\13\1\126\1\127\13\13\1\0\1\13\1\74"+
    "\2\0\3\35\3\0\5\35\12\0\2\13\7\0\3\13"+
    "\33\0\1\130\102\0\1\131\102\0\1\132\20\0\1\133"+
    "\11\0\1\134\50\0\1\32\36\0\1\135\2\0\34\135"+
    "\1\136\3\135\3\0\12\135\1\137\20\135\4\0\1\140"+
    "\7\0\1\141\31\0\1\34\2\0\1\34\1\141\41\0"+
    "\20\35\1\0\1\35\3\0\3\35\3\0\5\35\12\0"+
    "\2\35\7\0\3\35\4\0\1\140\7\0\1\141\31\0"+
    "\1\142\2\0\1\142\1\141\30\0\2\143\37\0\1\143"+
    "\1\0\1\143\35\0\2\144\37\0\1\144\1\0\1\144"+
    "\72\0\1\145\4\0\1\146\71\0\1\147\32\0\1\150"+
    "\1\151\22\0\3\13\1\152\1\153\11\13\1\154\1\13"+
    "\1\0\1\13\1\74\2\0\3\35\3\0\5\35\12\0"+
    "\2\13\7\0\3\13\70\0\1\155\100\0\1\156\1\0"+
    "\1\157\76\0\1\160\100\0\1\161\30\0\1\162\60\0"+
    "\1\163\2\0\2\163\1\0\2\163\1\164\70\163\1\62"+
    "\2\0\76\62\6\63\1\165\72\63\1\6\2\0\76\6"+
    "\1\7\2\0\76\7\1\10\2\0\76\10\13\0\2\13"+
    "\1\166\15\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\2\13\7\0\3\13\13\0\4\13\1\167"+
    "\13\13\1\0\1\13\1\74\2\0\3\35\3\0\5\35"+
    "\12\0\2\13\7\0\3\13\5\0\1\170\106\0\11\13"+
    "\1\171\6\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\2\13\7\0\3\13\13\0\20\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\1\172"+
    "\1\13\7\0\3\13\13\0\5\13\1\173\12\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\2\13"+
    "\7\0\3\13\13\0\11\13\1\174\6\13\1\0\1\13"+
    "\1\74\2\0\3\35\3\0\5\35\12\0\2\13\7\0"+
    "\3\13\13\0\5\13\1\175\6\13\1\176\3\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\2\13"+
    "\7\0\3\13\13\0\5\13\1\177\12\13\1\0\1\13"+
    "\1\74\2\0\3\35\3\0\5\35\12\0\2\13\7\0"+
    "\3\13\13\0\12\13\1\200\5\13\1\0\1\13\1\74"+
    "\2\0\3\35\3\0\5\35\12\0\2\13\7\0\3\13"+
    "\13\0\14\13\1\201\3\13\1\0\1\13\1\74\2\0"+
    "\3\35\3\0\5\35\12\0\2\13\7\0\3\13\13\0"+
    "\6\13\1\202\11\13\1\0\1\13\1\74\2\0\3\35"+
    "\3\0\5\35\12\0\2\13\7\0\3\13\13\0\20\13"+
    "\1\0\1\13\1\74\2\0\3\35\3\0\5\35\12\0"+
    "\1\13\1\203\7\0\3\13\13\0\11\13\1\204\6\13"+
    "\1\0\1\13\1\74\2\0\3\35\3\0\5\35\12\0"+
    "\2\13\7\0\3\13\13\0\3\13\1\205\5\13\1\206"+
    "\6\13\1\0\1\13\1\74\2\0\3\35\3\0\5\35"+
    "\12\0\2\13\7\0\3\13\13\0\1\207\17\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\2\13"+
    "\7\0\3\13\13\0\16\13\1\210\1\13\1\0\1\13"+
    "\1\74\2\0\3\35\3\0\5\35\12\0\2\13\7\0"+
    "\3\13\13\0\5\13\1\211\12\13\1\0\1\13\1\74"+
    "\2\0\3\35\3\0\5\35\12\0\2\13\7\0\3\13"+
    "\13\0\20\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\1\212\1\13\7\0\3\13\13\0\12\13"+
    "\1\213\5\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\2\13\7\0\3\13\13\0\1\214\17\13"+
    "\1\0\1\13\1\74\2\0\3\35\3\0\5\35\12\0"+
    "\2\13\7\0\3\13\13\0\1\215\17\13\1\0\1\13"+
    "\1\74\2\0\3\35\3\0\5\35\12\0\2\13\7\0"+
    "\3\13\13\0\12\13\1\216\5\13\1\0\1\13\1\74"+
    "\2\0\3\35\3\0\5\35\12\0\2\13\7\0\3\13"+
    "\37\0\1\217\41\0\1\135\2\0\40\135\1\0\1\220"+
    "\1\0\34\135\2\0\40\135\1\0\1\220\1\0\12\135"+
    "\1\221\20\135\14\0\1\141\31\0\1\140\2\0\1\140"+
    "\1\141\61\0\1\222\3\0\1\222\6\0\1\222\2\0"+
    "\1\222\73\0\1\223\47\0\12\13\1\224\5\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\2\13"+
    "\7\0\3\13\13\0\14\13\1\225\3\13\1\0\1\13"+
    "\1\74\2\0\3\35\3\0\5\35\12\0\2\13\7\0"+
    "\3\13\13\0\7\13\1\226\10\13\1\0\1\13\1\74"+
    "\2\0\3\35\3\0\5\35\12\0\2\13\7\0\3\13"+
    "\77\0\1\227\1\0\1\163\2\0\2\163\1\230\2\163"+
    "\1\164\71\163\2\0\76\163\5\63\1\231\1\232\72\63"+
    "\13\0\1\233\17\13\1\0\1\13\1\74\2\0\3\35"+
    "\3\0\5\35\12\0\2\13\7\0\3\13\13\0\1\13"+
    "\1\234\16\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\2\13\7\0\3\13\5\0\1\235\106\0"+
    "\1\13\1\236\16\13\1\0\1\13\1\74\2\0\3\35"+
    "\3\0\5\35\12\0\2\13\7\0\3\13\13\0\1\13"+
    "\1\237\16\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\2\13\7\0\3\13\13\0\6\13\1\240"+
    "\11\13\1\0\1\13\1\74\2\0\3\35\3\0\5\35"+
    "\12\0\2\13\7\0\3\13\13\0\12\13\1\241\5\13"+
    "\1\0\1\13\1\74\2\0\3\35\3\0\5\35\12\0"+
    "\2\13\7\0\3\13\13\0\7\13\1\242\10\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\2\13"+
    "\7\0\3\13\13\0\3\13\1\243\14\13\1\0\1\13"+
    "\1\74\2\0\3\35\3\0\5\35\12\0\2\13\7\0"+
    "\3\13\13\0\1\13\1\244\16\13\1\0\1\13\1\74"+
    "\2\0\3\35\3\0\5\35\12\0\2\13\7\0\3\13"+
    "\13\0\20\13\1\0\1\13\1\245\2\0\3\35\3\0"+
    "\5\35\12\0\2\13\7\0\3\13\13\0\14\13\1\246"+
    "\3\13\1\0\1\13\1\74\2\0\3\35\3\0\5\35"+
    "\12\0\2\13\7\0\3\13\13\0\3\13\1\247\14\13"+
    "\1\0\1\13\1\74\2\0\3\35\3\0\5\35\12\0"+
    "\2\13\7\0\3\13\13\0\4\13\1\250\13\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\2\13"+
    "\7\0\3\13\13\0\17\13\1\251\1\0\1\13\1\74"+
    "\2\0\3\35\3\0\5\35\12\0\2\13\7\0\3\13"+
    "\13\0\7\13\1\252\10\13\1\0\1\13\1\74\2\0"+
    "\3\35\3\0\5\35\12\0\2\13\7\0\3\13\13\0"+
    "\11\13\1\253\6\13\1\0\1\13\1\74\2\0\3\35"+
    "\3\0\5\35\12\0\2\13\7\0\3\13\13\0\1\13"+
    "\1\240\16\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\2\13\7\0\3\13\13\0\1\13\1\254"+
    "\16\13\1\0\1\13\1\74\2\0\3\35\3\0\5\35"+
    "\12\0\2\13\7\0\3\13\13\0\12\13\1\255\5\13"+
    "\1\0\1\13\1\74\2\0\3\35\3\0\5\35\12\0"+
    "\2\13\7\0\3\13\13\0\13\13\1\256\4\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\2\13"+
    "\7\0\3\13\13\0\1\257\17\13\1\0\1\13\1\74"+
    "\2\0\3\35\3\0\5\35\12\0\2\13\7\0\3\13"+
    "\46\0\1\222\2\0\1\222\42\0\20\13\1\0\1\13"+
    "\1\74\2\0\3\35\3\0\5\35\12\0\1\260\1\13"+
    "\7\0\3\13\13\0\15\13\1\261\2\13\1\0\1\13"+
    "\1\74\2\0\3\35\3\0\5\35\12\0\2\13\7\0"+
    "\3\13\5\0\1\262\5\0\20\13\1\0\1\13\1\74"+
    "\2\0\3\35\3\0\5\35\12\0\2\13\7\0\3\13"+
    "\4\0\2\263\5\0\20\263\1\0\4\263\1\0\1\263"+
    "\4\0\1\263\1\0\3\263\12\0\2\263\1\0\1\263"+
    "\3\0\1\263\1\0\3\263\13\0\7\13\1\233\10\13"+
    "\1\0\1\13\1\74\2\0\3\35\3\0\5\35\12\0"+
    "\2\13\7\0\3\13\13\0\6\13\1\264\11\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\2\13"+
    "\7\0\3\13\13\0\1\265\17\13\1\0\1\13\1\74"+
    "\2\0\3\35\3\0\5\35\12\0\2\13\7\0\3\13"+
    "\13\0\1\266\17\13\1\0\1\13\1\74\2\0\3\35"+
    "\3\0\5\35\12\0\2\13\7\0\3\13\13\0\20\13"+
    "\1\0\1\13\1\74\2\0\3\35\3\0\5\35\12\0"+
    "\1\267\1\13\7\0\3\13\4\0\1\270\1\170\5\0"+
    "\20\270\1\0\4\270\1\0\1\270\4\0\1\270\1\0"+
    "\3\270\12\0\2\270\1\0\1\270\3\0\1\270\1\0"+
    "\3\270\13\0\17\13\1\271\1\0\1\13\1\74\2\0"+
    "\3\35\3\0\5\35\12\0\2\13\7\0\3\13\13\0"+
    "\4\13\1\272\13\13\1\0\1\13\1\74\2\0\3\35"+
    "\3\0\5\35\12\0\2\13\7\0\3\13\13\0\1\273"+
    "\17\13\1\0\1\13\1\74\2\0\3\35\3\0\5\35"+
    "\12\0\2\13\7\0\3\13\13\0\1\13\1\233\16\13"+
    "\1\0\1\13\1\74\2\0\3\35\3\0\5\35\12\0"+
    "\2\13\7\0\3\13\13\0\16\13\1\274\1\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\2\13"+
    "\7\0\3\13\13\0\4\13\1\275\13\13\1\0\1\13"+
    "\1\74\2\0\3\35\3\0\5\35\12\0\2\13\7\0"+
    "\3\13\13\0\20\13\1\0\1\13\1\74\2\0\3\35"+
    "\3\0\5\35\12\0\2\13\7\0\1\276\2\13\13\0"+
    "\6\13\1\277\11\13\1\0\1\13\1\74\2\0\3\35"+
    "\3\0\5\35\12\0\2\13\7\0\3\13\13\0\1\13"+
    "\1\300\16\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\2\13\7\0\3\13\4\0\1\301\6\0"+
    "\22\301\2\0\1\301\1\0\1\301\4\0\1\301\1\0"+
    "\3\301\12\0\2\301\7\0\3\301\13\0\13\13\1\302"+
    "\4\13\1\0\1\13\1\74\2\0\3\35\3\0\5\35"+
    "\12\0\2\13\7\0\3\13\13\0\3\13\1\303\14\13"+
    "\1\0\1\13\1\74\2\0\3\35\3\0\5\35\12\0"+
    "\2\13\7\0\3\13\13\0\1\13\1\304\16\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\2\13"+
    "\7\0\3\13\13\0\20\13\1\0\1\13\1\74\2\0"+
    "\3\35\3\0\5\35\12\0\1\305\1\13\7\0\3\13"+
    "\4\0\1\270\6\0\20\270\1\0\4\270\1\0\1\270"+
    "\4\0\1\270\1\0\3\270\12\0\2\270\1\0\1\270"+
    "\3\0\1\270\1\0\3\270\13\0\12\13\1\306\5\13"+
    "\1\0\1\13\1\74\2\0\3\35\3\0\5\35\12\0"+
    "\2\13\7\0\3\13\13\0\1\307\17\13\1\0\1\13"+
    "\1\74\2\0\3\35\3\0\5\35\12\0\2\13\7\0"+
    "\3\13\13\0\1\310\17\13\1\0\1\13\1\74\2\0"+
    "\3\35\3\0\5\35\12\0\2\13\7\0\3\13\13\0"+
    "\1\13\1\311\16\13\1\0\1\13\1\74\2\0\3\35"+
    "\3\0\5\35\12\0\2\13\7\0\3\13\13\0\11\13"+
    "\1\312\6\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\2\13\7\0\3\13\13\0\3\13\1\313"+
    "\14\13\1\0\1\13\1\74\2\0\3\35\3\0\5\35"+
    "\12\0\2\13\7\0\3\13\13\0\1\314\17\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\2\13"+
    "\7\0\3\13\13\0\1\315\17\13\1\0\1\13\1\74"+
    "\2\0\3\35\3\0\5\35\12\0\2\13\7\0\3\13"+
    "\13\0\20\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\1\316\1\13\7\0\3\13\13\0\3\13"+
    "\1\317\14\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\2\13\7\0\3\13\13\0\1\320\17\13"+
    "\1\0\1\13\1\74\2\0\3\35\3\0\5\35\12\0"+
    "\2\13\7\0\3\13\13\0\6\13\1\321\11\13\1\0"+
    "\1\13\1\74\2\0\3\35\3\0\5\35\12\0\2\13"+
    "\7\0\3\13\13\0\16\13\1\166\1\13\1\0\1\13"+
    "\1\74\2\0\3\35\3\0\5\35\12\0\2\13\7\0"+
    "\3\13\13\0\6\13\1\322\11\13\1\0\1\13\1\74"+
    "\2\0\3\35\3\0\5\35\12\0\2\13\7\0\3\13"+
    "\13\0\7\13\1\323\10\13\1\0\1\13\1\74\2\0"+
    "\3\35\3\0\5\35\12\0\2\13\7\0\3\13\13\0"+
    "\7\13\1\324\10\13\1\0\1\13\1\74\2\0\3\35"+
    "\3\0\5\35\12\0\2\13\7\0\3\13\13\0\14\13"+
    "\1\325\3\13\1\0\1\13\1\74\2\0\3\35\3\0"+
    "\5\35\12\0\2\13\7\0\3\13\13\0\14\13\1\233"+
    "\3\13\1\0\1\13\1\74\2\0\3\35\3\0\5\35"+
    "\12\0\2\13\7\0\3\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9425];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\21\1\1\11\1\1\1\11"+
    "\7\1\2\11\1\1\3\11\1\1\1\11\6\1\2\11"+
    "\1\0\2\1\1\11\2\0\1\11\1\0\1\11\2\1"+
    "\1\0\33\1\2\11\1\1\2\11\2\0\3\1\1\0"+
    "\2\11\1\1\4\11\3\1\5\11\3\0\3\1\1\0"+
    "\26\1\2\11\2\1\1\11\3\1\3\11\1\0\2\1"+
    "\1\0\7\1\1\0\14\1\1\0\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _WeaveLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _WeaveLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 89: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 90: break;
          case 3: 
            { return DIVISION;
            } 
            // fall through
          case 91: break;
          case 4: 
            { return MULTIPLY;
            } 
            // fall through
          case 92: break;
          case 5: 
            { return DOUBLE_QUOTED_STRING;
            } 
            // fall through
          case 93: break;
          case 6: 
            { return SINGLE_QUOTED_STRING;
            } 
            // fall through
          case 94: break;
          case 7: 
            { return BACKTIKED_QUOTED_STRING;
            } 
            // fall through
          case 95: break;
          case 8: 
            { return ID;
            } 
            // fall through
          case 96: break;
          case 9: 
            { return PLUS;
            } 
            // fall through
          case 97: break;
          case 10: 
            { return COLON;
            } 
            // fall through
          case 98: break;
          case 11: 
            { return AND;
            } 
            // fall through
          case 99: break;
          case 12: 
            { return MINUS;
            } 
            // fall through
          case 100: break;
          case 13: 
            { return UNDERSCORE;
            } 
            // fall through
          case 101: break;
          case 14: 
            { return DOLLAR_VARIABLE;
            } 
            // fall through
          case 102: break;
          case 15: 
            { return OR;
            } 
            // fall through
          case 103: break;
          case 16: 
            { return INTEGER_LITERAL;
            } 
            // fall through
          case 104: break;
          case 17: 
            { return AT;
            } 
            // fall through
          case 105: break;
          case 18: 
            { return XOR;
            } 
            // fall through
          case 106: break;
          case 19: 
            { return L_PARREN;
            } 
            // fall through
          case 107: break;
          case 20: 
            { return R_PARREN;
            } 
            // fall through
          case 108: break;
          case 21: 
            { return L_CURLY;
            } 
            // fall through
          case 109: break;
          case 22: 
            { return R_CURLY;
            } 
            // fall through
          case 110: break;
          case 23: 
            { return L_BRACKET;
            } 
            // fall through
          case 111: break;
          case 24: 
            { return R_BRACKET;
            } 
            // fall through
          case 112: break;
          case 25: 
            { return LESS;
            } 
            // fall through
          case 113: break;
          case 26: 
            { return COMMA;
            } 
            // fall through
          case 114: break;
          case 27: 
            { return ESCLAMATION;
            } 
            // fall through
          case 115: break;
          case 28: 
            { return EQ;
            } 
            // fall through
          case 116: break;
          case 29: 
            { return TILDE;
            } 
            // fall through
          case 117: break;
          case 30: 
            { return GREATER;
            } 
            // fall through
          case 118: break;
          case 31: 
            { return MODULO;
            } 
            // fall through
          case 119: break;
          case 32: 
            { return QUESTION;
            } 
            // fall through
          case 120: break;
          case 33: 
            { return HASH;
            } 
            // fall through
          case 121: break;
          case 34: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 122: break;
          case 35: 
            { return MULTILINE_COMMENT;
            } 
            // fall through
          case 123: break;
          case 36: 
            { return AT_KEYWORD;
            } 
            // fall through
          case 124: break;
          case 37: 
            { return AS;
            } 
            // fall through
          case 125: break;
          case 38: 
            { return DO_KEYWORD;
            } 
            // fall through
          case 126: break;
          case 39: 
            { return IS;
            } 
            // fall through
          case 127: break;
          case 40: 
            { return IF;
            } 
            // fall through
          case 128: break;
          case 41: 
            { return OR_KEYWORD;
            } 
            // fall through
          case 129: break;
          case 42: 
            { return NAMESPACE_DIRECTIVE_KEYWORD;
            } 
            // fall through
          case 130: break;
          case 43: 
            { return PACKAGE_SEPARATOR;
            } 
            // fall through
          case 131: break;
          case 44: 
            { return CLOSE_ORDERED_KEYWORD;
            } 
            // fall through
          case 132: break;
          case 45: 
            { return ARROW_TOKEN;
            } 
            // fall through
          case 133: break;
          case 46: 
            { return CLOSE_CLOSE_KEYWORD;
            } 
            // fall through
          case 134: break;
          case 47: 
            { return DOUBLE_LITERAL;
            } 
            // fall through
          case 135: break;
          case 48: 
            { return AT_SPACE;
            } 
            // fall through
          case 136: break;
          case 49: 
            { return CARET_SPACE;
            } 
            // fall through
          case 137: break;
          case 50: 
            { return OPEN_ORDERED_KEYWORD;
            } 
            // fall through
          case 138: break;
          case 51: 
            { return OPEN_CLOSE_KEYWORD;
            } 
            // fall through
          case 139: break;
          case 52: 
            { return SUB_TYPE;
            } 
            // fall through
          case 140: break;
          case 53: 
            { return LESS_EQUAL;
            } 
            // fall through
          case 141: break;
          case 54: 
            { return METADATA_INJECTOR;
            } 
            // fall through
          case 142: break;
          case 55: 
            { return NOT_EQUAL;
            } 
            // fall through
          case 143: break;
          case 56: 
            { return EQUAL;
            } 
            // fall through
          case 144: break;
          case 57: 
            { return FAT_ARROW;
            } 
            // fall through
          case 145: break;
          case 58: 
            { return SIMILAR;
            } 
            // fall through
          case 146: break;
          case 59: 
            { return GREATER_EQUAL;
            } 
            // fall through
          case 147: break;
          case 60: 
            { return AND_KEYWORD;
            } 
            // fall through
          case 148: break;
          case 61: 
            { return VAR_DIRECTIVE_KEYWORD;
            } 
            // fall through
          case 149: break;
          case 62: 
            { return NOT_KEYWORD;
            } 
            // fall through
          case 150: break;
          case 63: 
            { return DOCUMENT_SEPARATOR;
            } 
            // fall through
          case 151: break;
          case 64: 
            { return RULE_ANY_DATE;
            } 
            // fall through
          case 152: break;
          case 65: 
            { return CLOSE_CLOSE_ORDERED_KEYWORD;
            } 
            // fall through
          case 153: break;
          case 66: 
            { return OPEN_CLOSE_ORDERED_KEYWORD;
            } 
            // fall through
          case 154: break;
          case 67: 
            { return FUNCTION_DIRECTIVE_KEYWORD;
            } 
            // fall through
          case 155: break;
          case 68: 
            { return VERSION_DIRECTIVE_KEYWORD;
            } 
            // fall through
          case 156: break;
          case 69: 
            { return RULE_ANY_REGEX;
            } 
            // fall through
          case 157: break;
          case 70: 
            { return TRUE_LITERAL;
            } 
            // fall through
          case 158: break;
          case 71: 
            { return TYPE_DIRECTIVE_KEYWORD;
            } 
            // fall through
          case 159: break;
          case 72: 
            { return ELSE;
            } 
            // fall through
          case 160: break;
          case 73: 
            { return CASE_KEYWORD;
            } 
            // fall through
          case 161: break;
          case 74: 
            { return NULL_LITERAL_KEYWORD;
            } 
            // fall through
          case 162: break;
          case 75: 
            { return FROM_KEYWORD;
            } 
            // fall through
          case 163: break;
          case 76: 
            { return NAMESPACE_URI;
            } 
            // fall through
          case 164: break;
          case 77: 
            { return USING;
            } 
            // fall through
          case 165: break;
          case 78: 
            { return INPUT_DIRECTIVE_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 79: 
            { return MATCH_KEYWORD;
            } 
            // fall through
          case 167: break;
          case 80: 
            { return FALSE_LITERAL;
            } 
            // fall through
          case 168: break;
          case 81: 
            { return MIME_TYPE_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 82: 
            { return UPDATE_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 83: 
            { return UNLESS;
            } 
            // fall through
          case 171: break;
          case 84: 
            { return IMPORT_DIRECTIVE_KEYWORD;
            } 
            // fall through
          case 172: break;
          case 85: 
            { return OUTPUT_DIRECTIVE_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 86: 
            { return DEFAULT;
            } 
            // fall through
          case 174: break;
          case 87: 
            { return MATCHES_KEYWORD;
            } 
            // fall through
          case 175: break;
          case 88: 
            { return ANNOTATION_DIRECTIVE_KEYWORD;
            } 
            // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
